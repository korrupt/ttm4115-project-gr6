version: 2.1

commands:
  install:
    steps:
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

  setup_local_docker:
    steps:
      - run:
          name: Use sudo docker in local builds
          command: |
            if [[ $CIRCLE_SHELL_ENV == *"localbuild"* ]]; then
              sudo chmod u+s $(which docker)
            fi

jobs:
  format_check:
    docker:
      - image: cimg/node:lts-browsers
    steps:
      - checkout
      - install
      - run: npx nx format:check

  build_api:
    docker:
      - image: cimg/node:lts-browsers
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - setup_local_docker
      - run:
          name: Build api
          command: |
            docker build . -f deployment/api.dockerfile

  affected_test:
    docker:
      - image: cimg/node:lts-browsers
    steps:
      - checkout
      - install
      - run:
          name: Run test affected projects
          command: npx nx affected --base=main --head=$CIRCLE_SHA1 -t lint,test --exclude api-e2e

  test_all:
    docker:
      - image: cimg/node:lts-browsers
    steps:
      - checkout
      - install
      - run:
          command: npx nx run-many -t lint,test --exclude api-e2e
      - store_test_results:
          path: test-results

  api_e2e:
    docker:
      - image: cimg/node:lts-browsers
    steps:
      - checkout
      - install
      - setup_remote_docker:
          docker_layer_caching: true
      - setup_local_docker
      - run:
          name: Setup daemons
          command: |
            echo $CIRLCE_SHA1
            cp .env.test .env
            export $(grep -v '^#' .env | xargs)
            # postgres
            docker run --rm \
              -e POSTGRES_USER=$TYPEORM_USER \
              -e POSTGRES_PASSWORD=$TYPEORM_PASSWORD \
              -e POSTGRES_DB=$TYPEORM_DATABASE \
              -d \
              postgis/postgis:16-3.4-alpine -p $TYPEORM_PORT
            # api
            docker run --rm \
              --env-file=.env \
              -d \
              $(docker build . -q -f deployment/api.dockerfile)
      - run:
          name: Run tests
          command: npx nx run api-e2e:e2e

workflows:
  api_prod:
    jobs:
      - test_all
      - build_api
      - api_e2e

  affected:
    jobs:
      - format_check
      - affected_test
